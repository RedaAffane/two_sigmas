demo()
library(MASS)
library(MASS)
library(ISLR)
### Simple linear regression
names(Boston)
?Boston
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
require(ISLR)
sumary(ISLR)
summary(ISLR)
require(MASS)
help(ISLR)
??ISLR
help(MASS)
require(Smarket)
names(Smarket)
head(Smarket,n=)
?lda
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=Year<2005)
lda.fit
plot(lda.fit)
subset.2005 = subset(Smarket,Year=2005)
head(subset.2005,n=)
subset.2005 = subset(Smarket,Year==2005)
head(subset.2005,n=)
lda.pred = predict(lda.fit,subet.2005)
lda.pred = predict(lda.fit,subset.2005)
class(lda.pred)
dataframe(lda.pred)
data.frame(lda.pred)
frame = data.frame(lda.pred)
frame[1:5,]
table(lda.pred$class==subset.2005$Direction)
table(lda.pred$class,subset.2005$Direction)
mean(table(lda.pred$class==subset.2005$Direction)
mean(table(lda.pred$class==subset.2005$Direction)
pairs(Smarket,col=Smarket$Direction)
pairs(Smarket,col=Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
?glm
glm.fit
summary(glm.fit)
?predict
predict(glm.fit,type="response",[1:5])
glm_predictor = predict(glm.fit,type="response")
glm_predictor[1:5]
predictions=ifelse(glm_predictor[1:5]>0.5,"Up","Down")
predictions
train = Year<2005
train = subset(Smarket,Year<2005)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
attach(Smarket)
train = Year<2005
train
data=Smarket,family=binomial, subset=train)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
summary(glm.fit)
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type="response")
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
glm.pred
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
library(class)
?knn
attach(Smarket)
Xlag=cbind(Lag1,Lag2)
Xlag
train=Year<2005
library(ISLR)
summary(Hitters)
?Hitters
library(ISLR)
summary(Hitters)
library(leap)
library(leaps)
install.packages(leaps)
require(leaps)
installed.packages()
install.packages("leaps")
Hitters = na.omit(Hitters)
library(leaps)
regsubset = regsubsets(Salary~.,data=Hitters)
summary(regsubset)
regsubset.full = regsubset(Salary~.,data=Hitters,nvmax=19)
regsubset.full = regsubsets(Salary~.,data=Hitters,nvmax=19)
summary(regsubset.full)
names(regsummary)
regsummary = summary(regsubset.full)
names(regsummary)
regsummary$cp
regsummary$bic
par(mfrow=c(2,2))
plot(regsummary$cp,main='Mallow\'s cp',xlab='cp',ylab='Mallow\'s cp')
plot(regsummary$bic,main='BIC',xlab='cp',ylab='BIC')
plot(regsummary$cp,main='r squared',xlab='cp',ylab='r squared')
plot(regsummary$cp,main='residual sum of squres',xlab='cp',ylab='rss')
par(mfrow=c(2,2))
plot(regsummary$cp,main='Mallow\'s cp',xlab='number of predictors',ylab='Mallow\'s cp')
plot(regsummary$bic,main='BIC',xlab='number of predictors',ylab='BIC')
plot(regsummary$cp,main='r squared',xlab='number of predictors',ylab='r squared')
plot(regsummary$cp,main='residual sum of squres',xlab='number of predictors',ylab='rss')
wich.min(regsummary$cp)
which.min(regsummary$cp)
points(10,regsummary$cp[10],pch=20,col='red')
par(mfrow=c(2,2))
plot(regsummary$cp,main='Mallow\'s cp',xlab='number of predictors',ylab='Mallow\'s cp')
points(10,regsummary$cp[10],pch=20,col='red')
plot(regsummary$bic,main='BIC',xlab='number of predictors',ylab='BIC')
plot(regsummary$cp,main='r squared',xlab='number of predictors',ylab='r squared')
plot(regsummary$cp,main='residual sum of squres',xlab='number of predictors',ylab='rss')
par(mfrow=c(2,2))
plot(regsummary$cp,main='Mallow\'s cp',xlab='number of predictors',ylab='Mallow\'s cp')
plot(regsummary$bic,main='BIC',xlab='number of predictors',ylab='BIC')
points(10,regsummary$cp[10],pch=20,col='red')
plot(regsummary$cp,main='r squared',xlab='number of predictors',ylab='r squared')
plot(regsummary$cp,main='residual sum of squres',xlab='number of predictors',ylab='rss')
par(mfrow=c(2,2))
plot(regsummary$cp,main='Mallow\'s cp',xlab='number of predictors',ylab='Mallow\'s cp')
points(10,regsummary$cp[10],pch=20,col='red')
plot(regsummary$bic,main='BIC',xlab='number of predictors',ylab='BIC')
plot(regsummary$cp,main='r squared',xlab='number of predictors',ylab='r squared')
plot(regsummary$cp,main='residual sum of squres',xlab='number of predictors',ylab='rss')
plot(regsubset.full,scale="Cp")
par(mfrow=c(1,1))
plot(regsubset.full,scale="Cp")
coefficients(regsubset.full,10)
which.min(regsummary$cp)
par(mfrow=c(2,2))
plot(regsummary$cp,main='Mallow\'s cp',xlab='number of predictors',ylab='Mallow\'s cp')
glm.fit=glm(Salary~AtBat,Hits,Walks,CAtBat,CRuns,CRBI,Cwalks,DivisionW,PutOuts,Assists,data=Hitters)
glm.fit=glm(Salary~AtBat+Hits+Walks+CAtBat+CRun+CRBI+Cwalks+DivisionW+PutOuts+Assists+data=Hitters)
glm.fit=glm(Salary~AtBat+Hits+Walks+CAtBat+CRun+CRBI+Cwalks+DivisionW+PutOuts+Assists,data=Hitters)
glm.fit=glm(Salary~AtBat+Hits+Walks+CAtBat+CRuns+CRBI+Cwalks+DivisionW+PutOuts+Assists,data=Hitters)
glm.fit=glm(Salary~AtBat+Hits+Walks+CAtBat+CRuns+CRBI+CWalks+DivisionW+PutOuts+Assists,data=Hitters)
glm.fit=glm(Salary~AtBat+Hits+Walks+CAtBat+CRuns+CRBI+CWalks+DivisionW+PutOuts+Assists,data=Hitters)
names(Hitters)
glm.fit=glm(Salary~AtBat+Hits+Walks+CAtBat+CRuns+CRBI+CWalks+Division+PutOuts+Assists,data=Hitters)
summary(glm.fit)
crossv = cv.glm(Hitters,glm.fit,K=10)
require(boot)
crossv = cv.glm(Hitters,glm.fit,K=10)
crossv$delta
crossv
names(crossv)
glm.fit.full=glm(Salary~.,data=Hitters)
summary(glm.fit.full)
crossv.full=cv.glm(Hitters,glm.fit.full,k=10)
glm.fitfull=glm(Salary~.,data=Hitters)
crossv.full=cv.glm(Hitters,glm.fitfull,k=10)
crossv.full =  cv.glm(Hitters,glm.fitfull,K=10)
crossv.full$delta
crossv$delta
?cv.glm
par(mflow=c(1,1))
par(mfrow=c(1,1))
plot(Salary~AtBat,data=Hitters)
plot(Salary~PutOuts,data=Hitters)
plot(Salary~Assists,data=Hitters)
plot(Salary~AtBat+PutOuts,data=Hitters)
installed.packages("plot3D")
require("plot3D")
require(plot3D)
install.packages("plot3D")
require(plot3D)
?surf3D
surf3D(Hitters$AtBat,Hitters$PutOuts,Hitters$Salary)
Hittersdf = data.frame(Hitters)
head(Hittersdf,n=)
head(Hittersdf.Salary,n=)
head(Hittersdf["Salary"],n=)
surf3D(Hittersdf["AtBat"],Hittersdf["PutOuts"],Hittersdf["Salary"])
regsubset.fwd = regsubsets(Salary~.,data=Hitters,nvmax=19,method"forward")
regsubset.fwd = regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
summary.fwd = summary(regsubset.fwd)
summary.fwd
names(summary.fwd)
which.min(summary.fwd)
which.min(summary.fwd$cp)
coefficients(summary.fwd)
coefficients(summary.fwd,10)
which.min(summary.fwd$cp)
summary.fwd$cp[10]
summary.fwd$cp
coefficients(summary.fwd,10)
dim(Hitters)
set.seed(1)
ssample = sample(seq(263),180,replace=FALSE)
sample = sample(seq(263),180,replace=FALSE)
sample
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
train = sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
rep(NA,19)
valid_error = rep(NA,19)
x_test=model.matrix(Salary~.,data=Hitters[-train,])
x_test
model.matrix(Salary~AtBat+PutOuts,Data=Hitters)
model.matrix(Salary~AtBat+PutOuts,data=Hitters)
coef(summary.fwd,10)
coef(summary.fwd,id=10)
coef(regfit.fwd,id=10)
summary(regfit.fwd)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
valid_error = rep(NA,19)
summary(regfit.fwd)
x_test=model.matrix(Salary~.,data=Hitters[-train,])
library(ISLR)
summary(Hitters)
require(boot)
Hitters = na.omit(Hitters)
library(leaps)
regsubset = regsubsets(Salary~.,data=Hitters)
summary(regsubset)
regsubset.full = regsubsets(Salary~.,data=Hitters,nvmax=19)
regsummary = summary(regsubset.full)
names(regsummary)
par(mfrow=c(2,2))
plot(regsummary$cp,main='Mallow\'s cp',xlab='number of predictors',ylab='Mallow\'s cp')
points(10,regsummary$cp[10],pch=20,col='red')
plot(regsummary$bic,main='BIC',xlab='number of predictors',ylab='BIC')
plot(regsummary$cp,main='r squared',xlab='number of predictors',ylab='r squared')
plot(regsummary$cp,main='residual sum of squres',xlab='number of predictors',ylab='rss')
which.min(regsummary$cp)
par(mfrow=c(1,1))
plot(regsubset.full,scale="Cp")
coefficients(regsubset.full,10)
glm.fit=glm(Salary~AtBat+Hits+Walks+CAtBat+CRuns+CRBI+CWalks+Division+PutOuts+Assists,data=Hitters)
crossv = cv.glm(Hitters,glm.fit,K=10)
glm.fitfull=glm(Salary~.,data=Hitters)
crossv.full =  cv.glm(Hitters,glm.fitfull,K=10)
require(plot3D)
regsubset.fwd = regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
summary.fwd = summary(regsubset.fwd)
dim(Hitters)
set.seed(1)
train = sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
valid_error = rep(NA,19)
x_test=model.matrix(Salary~.,data=Hitters[-train,])
summary(regfit.fwd)
coef(regfit.fwd,id=2)
library(ISLR)
summary(Hitters)
require(boot)
Hitters = na.omit(Hitters)
library(leaps)
regsubset = regsubsets(Salary~.,data=Hitters)
summary(regsubset)
regsubset.full = regsubsets(Salary~.,data=Hitters,nvmax=19)
regsummary = summary(regsubset.full)
names(regsummary)
par(mfrow=c(2,2))
plot(regsummary$cp,main='Mallow\'s cp',xlab='number of predictors',ylab='Mallow\'s cp')
points(10,regsummary$cp[10],pch=20,col='red')
plot(regsummary$bic,main='BIC',xlab='number of predictors',ylab='BIC')
plot(regsummary$cp,main='r squared',xlab='number of predictors',ylab='r squared')
plot(regsummary$cp,main='residual sum of squres',xlab='number of predictors',ylab='rss')
which.min(regsummary$cp)
par(mfrow=c(1,1))
plot(regsubset.full,scale="Cp")
coefficients(regsubset.full,10)
glm.fit=glm(Salary~AtBat+Hits+Walks+CAtBat+CRuns+CRBI+CWalks+Division+PutOuts+Assists,data=Hitters)
crossv = cv.glm(Hitters,glm.fit,K=10)
glm.fitfull=glm(Salary~.,data=Hitters)
crossv.full =  cv.glm(Hitters,glm.fitfull,K=10)
require(plot3D)
regsubset.fwd = regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
summary.fwd = summary(regsubset.fwd)
dim(Hitters)
set.seed(1)
train = sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
valid_error = rep(NA,19)
x_test=model.matrix(Salary~.,data=Hitters[-train,])
coef(regfit.fwd,id=18)
coef(regfit.fwd,id=19)
str(coef(regfit.fwd,id=18))
x_test
summary(x_test)
names(coef(regfit.fwd,id=4))
x_test[,"Walks"]
Hitters
str(Hitters)
str(Hitters[-train])
str(x_test)
head(Hitters[-train],n=2)
head(x_test,n=2)
head(x_test,n=2)
validation_error = rep(NA,19)
x_test=model.matrix(Salary~.,data=Hitters[-train,])
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
predict_set=x_test[,names(coefi)]
prediction=predict_set %*% coefi
validation_error[i] = mean((Hitters$Salary[-train]-prediction)^2)
}
plot(validation_error)
plot(sqrt(validation_error)
plot(sqrt(validation_error))
plot(sqrt(validation_error))
plot(sqrt(validation_error),ylab="Root MSE",ylim=c(300,400),pch=19,type="b")
plot(sqrt(validation_error),ylab="Root MSE")
plot(sqrt(validation_error),ylab="Root MSE",type="b")
plot(sqrt(validation_error),ylab="Root MSE",type="b",pch=19)
plot(sqrt(validation_error),ylab="Root MSE",type="b",pch=19,ylim=(300,400))
plot(sqrt(validation_error),ylab="Root MSE",type="b",pch=19,ylim=c(300,400))
plot(sqrt(regfit.fwd$rss[-1]/180),pch=19,type="b",col="blue")
plot(sqrt(validation_error),ylab="Root MSE",type="b",pch=19,ylim=c(300,400))
points(sqrt(regfit.fwd$rss[-1]/180),pch=19,type="b",col="blue")
legend("topright",legend=c("Training","validation"),col=c("blue","black"),pch=19)
library(glmnet)
install.packages("glmnet")
?glmnet
help(glmnet)
library(glmnet)
?(glmnet)
?glmnet
x=model.matrix(Salary~.-1,data=Hitters)
x
?model_matrix
help("model.matrix")
str(x)
y=model.matrix(Hitters$Salary)
y=Hitters$Salary
y
fit_ridge = glmnet(x,y,alpha=0)
plot(fit_ridge,xvar="lambda",label=TRUE)
plot(fit_ridge,label=TRUE)
xvar="lambda"
plot(fit_ridge,xvar="lambda",label=TRUE)
cv.ridge = cv.glmnet(x,y,alpha=0)
plot(cv.ridge)
fit_lasso=glmnet(x,y,alpha=1)
plot(fit_lasso,xvar="lambda",label=TRUE)
cv.lasso=cv.glmnet(x,y,alpha=1)
plot(cv.lasso)
coef(fit_lasso)
coef(cv.lasso)
prop.test(18,120,0.25)
t.test(c(7,8,9,9,8,7,6,9),mu=7,conf.level=0.95)
t.test(c(7,8,9,9,8,7,6,9),mu=7,conf.level=0.9)
t.test(c(7,8,9,9,8,7,6,9),mu=7)
?qqplot
?shapiro.test
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
shapiro.test(rnorm(1000))
qqplot(rnorm(1000))
?qqplot
qqplot(y=rnorm(1000))
?tnorm
?rnorm
library(visNetwork)
library(magrittr)
library(shiny)
library(dplyr)
library(plyr)
library(data.table)
#load the java parts from the Java course structure file
parts = read.csv("./data/cours_parts_ids.csv",strip.white=TRUE)
java_parts=parts$parts
#Only select the Java related parts
complete_parts = read.csv("./data/COMPLETED_PART_clean.csv",strip.white=TRUE)
complete_java_parts =complete_parts[complete_parts$part_id %in% java_parts,]
complete_java_parts = complete_java_parts[complete_java_parts$completed == "t",]
#drop unused columns
drops_parts = c("X","completed")
complete_java_parts = complete_java_parts[, !names(complete_java_parts) %in% drops_parts]
colnames(complete_java_parts)=c("section_id","completed_at","user_id")
# get the Ids of the Java exercises
exercise_ids = read.csv("./data/EXERCISE.csv",sep=";")
exercise_java_ids = exercise_ids[exercise_ids$reference_course_id == 26832,]$id
# select only the rows referenced by these Ids
exercises = read.csv("./data/USER_EXERCISE_SESSION_clean.csv")
exercises_java = exercises[ exercises$exercise_id %in% exercise_java_ids ,]
#drop unused columns
drops_exe = c("X","id","created_at","score")
exercises_java = exercises_java[, !names(exercises_java) %in% drops_exe]
colnames(exercises_java)=c("section_id","completed_at","user_id")
exercises_java = exercises_java[!exercises_java$completed_at == "",]
#construct the union of both completed parts and exercises
completed_sections = rbind(complete_java_parts,exercises_java)
completed_sections$completed_at <- as.POSIXct(completed_sections$completed_at, format="%Y-%m-%d %H:%M:%S" )
#Remove the the parts corresponding to the index from the analysis
completed_sections=data.table(completed_sections)
completed_sections=completed_sections[!section_id %in% c(2186827,2186826)]
#Read and parse the learners who passed
passed_all=read.csv("./data/USER_COURSE_RESULT_clean.csv",strip.white = TRUE)
passed_java_duplicates=passed_all[passed_all$reference_id == 26832,]
passed_java = distinct(passed_java_duplicates,user_id,created_at, .keep_all = TRUE)
passed_java = distinct(passed_java[passed_java$passed == "t",],user_id,passed, .keep_all = TRUE)
learners_pass = completed_sections[completed_sections$user_id %in% passed_java$user_id,]
learners_pass_ids = as.character(unique(learners_pass$user_id))
learners_fail = completed_sections[!completed_sections$user_id %in% passed_java$user_id,]
learners_fail_ids = as.character(unique(learners_fail$user_id))
#Premium Learners who failed and those who passed
premium_learners = read.csv("./data/java_premiums.csv")
premium_learners = premium_learners$user_id
learners_pass_prem = learners_pass[learners_pass$user_id %in% premium_learners,]
learners_pass_prem_ids = as.character(unique(learners_pass_prem$user_id))
learners_fail_prem = learners_fail[learners_fail$user_id %in% premium_learners,]
learners_fail_prem_ids = as.character(unique(learners_fail_prem$user_id))
#Compute the average time of completion of the course by the learners who passed
completed_sections_table = data.table(completed_sections)
time_table = completed_sections_table[,time_period := difftime(max(completed_at),min(completed_at),units="days"),by= user_id]
time_table_unique = time_table[!duplicated(time_table$user_id),]
time_table_pass = time_table_unique[time_table_unique$user_id %in% learners_pass_ids,]
average_course_time = mean(time_table_pass$time_period)
#Compute the average time of completion of the course by the learners who didn't pass
time_table_fail = time_table_unique[time_table_unique$user_id %in% learners_fail_ids,]
average_course_time_fail = mean(time_table_fail$time_period)
#Compute the average time of completion of the course by the premium learners who didn't pass
time_table_prem_fail = time_table_unique[time_table_unique$user_id %in% learners_fail_prem_ids,]
average_course_time_prem_fail = mean(time_table_prem_fail$time_period)
setwd("~/Documents/kaggle/two_sigmas/git/two_sigmas")
corr_binary = read.csv("./corr_binary.csv")
head(corr_binary)
?read.csv
rownames(corr_binary) = corr_binary$X
head(corr_binary)
str(corr_binary)
corr_binary$X = NULL
str(corr_binary)
install.packages("cba")
library(cba)
install.packages("proxy")
?hcust
?hcl$ust
?hclust
?dist
humming_dist=dist(corr_binary,method = "binary")
humming_dist
str(humming_dist)
clusters = hclust(humming_dist,method = "complete")
plot(clusters)
summary(clusters)
clusterCut <- cutree(clusters, 5)
clusterCut
table(clusterCut)
clusterCut <- cutree(clusters, 100)
table(clusterCut)
clusterCut <- cutree(clusters, 50)
table(clusterCut)
clusterCut <- cutree(clusters, 100)
table(clusterCut)
